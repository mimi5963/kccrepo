package kosa.realSoft;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class BankTransactionAnalyzerSimple {
	private static final String RESOURCES = "src/main/resources/";

	// KISS 원칙이 적용되었다함?
	// 명령줄 인수로 csv 파일을 전달받음
	public static void main(final String... args) throws IOException {

		final BankStatementCSVParser baCsvParser = new BankStatementCSVParser();

		final String fileName = args[0];

		// 특정 월의 값 total값 알고 싶어
		final Path path = Paths.get(RESOURCES + fileName);
		final List<String> lines = Files.readAllLines(path);

		final List<BankTransaction> bankTransactions = baCsvParser.parseLineFromCSV(lines);

		System.out.println(calculateTotalAmount(bankTransactions));
		System.out.println(selectInMonth(bankTransactions, Month.JANUARY));
		;

		final DateTimeFormatter DATE_PATTERN = DateTimeFormatter.ofPattern("dd-MM-yyyy");

	}

	private static List<BankTransaction> selectInMonth(List<BankTransaction> bankTransactions, Month month) {
		final List<BankTransaction> bankTransactionInMonth = new ArrayList<>();
		for (final BankTransaction bank : bankTransactions) {
			if (bank.getDate().getMonth() == month) {
				bankTransactionInMonth.add(bank);
			}
		}

		return bankTransactionInMonth;
	}

	private static double calculateTotalAmount(List<BankTransaction> bankTransactions) {

		double total = 0d;
		for (final BankTransaction bank : bankTransactions) {
			total += bank.getAmount();
		}
		return total;

	}
}
